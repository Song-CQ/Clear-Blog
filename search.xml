<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ILRuntimeTool</title>
      <link href="/2024/08/01/ilruntimetool/"/>
      <url>/2024/08/01/ilruntimetool/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Framework框架 使用ILRuntime插件 进行热更方案。</p><p>ILRuntime 原理是将要热更的代码编译成 Dll,通过对热更Dll的载入实现热更</p><p>项目启动时 判断HotFix.Dll的版本,如果外部的版本更高,则下载新的HotFix.Dll</p><p>再从项目中动态加载这个Dll， 从而实现代码热更。</p><p>本工具是对代码进行编译成Dll这一步进行自动化流程</p><p>开发者可以在项目中正常进行开发，在要热更代码时，点击【启动ILRuntime热更流程】</p><p>工具会自动将热更路径内的代码提取 然后编译成HotFix.Dll.</p><p><a href="https://ourpalm.github.io/ILRuntime/public/v1/guide/index.html">ILRuntime文档</a></p><h2 id="工具界面"><a href="#工具界面" class="headerlink" title="工具界面"></a>工具界面</h2><img src="bg.png" alt="" style="width:100%" /> <hr><h2 id="工具功能说明"><a href="#工具功能说明" class="headerlink" title="工具功能说明"></a>工具功能说明</h2><h3 id="热更相关的路径"><a href="#热更相关的路径" class="headerlink" title="热更相关的路径"></a>热更相关的路径</h3><img src="0.png" alt="" style="width:100%" /> ---<p>1.<strong>[提取的热更代码路径]</strong> : 存放 从项目中提取出来的热更代码 的文件夹</p><ol start="2"><li><strong>[存放HotFix.Dll 路径]</strong> : 存放编译出来的HotFix.Dll(一般情况下是StreamingAssets下的HotFix文件夹)</li></ol><p><strong>热更文件夹</strong></p><p><em>项目中会被热更的文件夹,存放在该文件夹下的代码会被热更</em></p><p><strong>[ModuleMgr 路径]</strong> : module代码</p><p><strong>[Logic 路径]</strong> : 逻辑代码</p><h2 id="启动热更设置"><a href="#启动热更设置" class="headerlink" title="启动热更设置"></a>启动热更设置</h2><img src="2.png" alt="" style="width:100%" /> <hr><p>1.被提取的热更代码是否删除 默认false</p><p>  为true时在执行[Client Code To Cache] 时会将项目热更文件夹的代码删除并创建热更占位文件</p><p>  为何要删除？因为编译的Dll会引用ProjectApp.csproj。所以为了避免代码重复会删除项目中的文件</p><p>  <em>一般在打包编译时才会删除项目中的热更文件</em><br>  <del>原先是不删除本地的会造成编译 hotfix.dll引用 ProjectApp.dll 时报代码重复 后来在注册代码时换了提取出去的代码文件的命名空间 就不会报相同命名空间下的文件重复了</del></p><p>2.编译Dll的方案：使用何种方案进行dll编译</p><pre class=" language-C#"><code class="language-C#">public enum CompileCodePlan&#123;    MsBuild = 0,//调用使用vs的Msbuild编译 建议使用这个方法    CompileAssembly_HotfixTool = 1,    //使用外部程序 HotfixTool 创建CSharpCodeProvider进行编译    CompileAssembly_UnityEditor = 2,    //使用UntiyEditor编译器进程，创建CSharpCodeProvider 进行编译     (这种编译方式会导致编译出来的pdb调试文件被unity的(pdb2mdb.exe)转换成mbd文件)   &#125;</code></pre><p>3.是否重新创建.bat文件: 调用外部程序的.bat文件是否需要重新创建</p><p>4.如果是使用MsBuild编译 要设置MsBuild.exe的目录,</p><p>MsBuild.exe 一般位于vs安装目录的VS2022\Msbuild\Current\Bin\MSBuild.exe</p><h2 id="热更流程"><a href="#热更流程" class="headerlink" title="热更流程"></a>热更流程</h2><img src="1.png" alt="" style="width:100%" /> <hr><p><strong>点击【启动ILRuntime热更流程】后 按顺序执行</strong></p><ol><li><p><strong>[Client Code To Cache] - 提取代码</strong> </p><p>从项目中将热更文件夹下的代码提取至缓存文件夹（_Temporary&#x2F;HotFix）<strong>该文件夹下的代码不会被自动删除</strong> </p></li><li><p><strong>[Register Code] - 注册热更代码</strong>   </p><p>会将缓存文件夹（_Temporary&#x2F;HotFix)中的 <strong>所有代码</strong> 复制至<strong>提取的热更代码路径</strong>,同时将文件名注册ProjectApp_HotFix.csproj<br>提取时会将热更的CS文件中的命名空间 ProjectApp.csproj替换成ProjectApp.HotFix 避免编译时造成相同命名空间下的文件重复</p></li><li><p><strong>[Compile Code To Dll] - 编译Dll</strong></p><p>将ProjectApp_HotFix.csproj 注册的代码文件使用设定的编译方式进行编译。</p></li></ol><hr><p><strong>Tips</strong> </p><p><strong>（_Temporary&#x2F;HotFix）该文件夹下的代码不会被自动删除</strong> </p><p>执行[Client Code To Cache]命令时  </p><p>热更文件夹的代码 提取至 缓存文件夹下时, <strong>热更文件夹</strong> 下的所有文件会复制至<strong>缓存文件夹</strong>下,<br>如果有同名文件则更新 <strong>缓存文件夹</strong> 下的文件，但是并不会删除 <strong>缓存文件夹</strong> 的未更新文件 <em>(也就是热更文件夹下没有的文件)</em>.</p><p>在执行注册代码时会将 <strong>缓存文件夹</strong> 中的所有代码(包括未更新文件)注册进编译流程，<br>如果你只想要将热更文件夹下的代码注册编译流程时 ，请先执行 <strong>[删除热更文件夹缓存]</strong> .</p><p>为何要这样设置，主要是防止不规范执行 <strong>[提取代码]</strong> 和 <strong>[载入缓存代码]</strong> 两个命令时造成代码被意外删除。</p><hr><h2 id="生成文件"><a href="#生成文件" class="headerlink" title="生成文件"></a>生成文件</h2><img src="3.png" alt="" style="width:100%" /> <hr><p>1.HotFix.Dll就是生成的Dll文件</p><p>2.HotFix.pdb是生成的调试文件 <del>打包时删除</del></p><p>3.version 是生成的dll版本信息，包含dll的编号和 MD5码和生成时间</p><pre class=" language-C#"><code class="language-C#">&#123;"version":48,"buildDate":"2024/8/2 10:35:38","MD5":"74a7f12b6e17f2aeb514c02b74d47417","size":15360&#125;</code></pre><hr><h2 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h2><img src="4.png" alt="" style="width:100%" /> <hr><p>1.<strong>载入热更文件夹缓存代码</strong><br>  将缓存文件夹（_Temporary&#x2F;HotFix)中的<strong>所有代码</strong>复制至项目热更文件夹</p><p>2.<strong>删除热更文件夹缓存代码</strong><br>  删除热更<em>缓存文件夹</em>（_Temporary&#x2F;HotFix)的缓存</p><hr><p><strong>以下功能是接入的ILRuntime的接口</strong> <del>（不推荐使用）一般都有问题</del></p><p>1.分析热更DLL生成CLR绑定<br>2.注册跨域继承适配器</p><h2 id="开发该工具中碰到问题"><a href="#开发该工具中碰到问题" class="headerlink" title="开发该工具中碰到问题"></a>开发该工具中碰到问题</h2><hr><p>1.在使用CSharpCodeProvider代码加载代码文件进行编译时要注意引用netstandard.dll 而且必须是unity编辑器的netstandard.dll</p><pre class=" language-C#"><code class="language-C#">////获取当前项目所引用的程序集 netstandard.dllstring frameworkInstallDir = System.Runtime.InteropServices.RuntimeEnvironment.GetRuntimeDirectory();cp.ReferencedAssemblies.Add(frameworkInstallDir + @"\Facades\netstandard.dll");</code></pre>]]></content>
      
      
      <categories>
          
          <category> Unity框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> 框架工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown快速入门</title>
      <link href="/2024/07/30/markdown-kuai-su-ru-men/"/>
      <url>/2024/07/30/markdown-kuai-su-ru-men/</url>
      
        <content type="html"><![CDATA[<h1 id="Markdown快速入门（typora）"><a href="#Markdown快速入门（typora）" class="headerlink" title="Markdown快速入门（typora）"></a>Markdown快速入门（typora）</h1><h2 id="1、代码块："><a href="#1、代码块：" class="headerlink" title="1、代码块："></a>1、代码块：</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//代码块语法：</span>```java      ```shell</code></pre><p>​<strong>1.java代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>yrp<span class="token punctuation">.</span>po<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token annotation punctuation">@Entity</span><span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"t_user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span></code></pre><p>​<strong>2.shell脚本</strong></p><pre class=" language-shell"><code class="language-shell">//linux下spring项目的启动命令# java -jar blog start</code></pre><h2 id="2、标题："><a href="#2、标题：" class="headerlink" title="2、标题："></a>2、标题：</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//标题语法</span># 一级标题## 二级标题### 三级标题#### 四级标题    ##### 五级标题###### 六级标题 </code></pre><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h2 id="3、字体"><a href="#3、字体" class="headerlink" title="3、字体"></a>3、字体</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 加粗</span><span class="token operator">*</span><span class="token operator">*</span>等不到天黑<span class="token operator">*</span><span class="token operator">*</span><span class="token comment" spellcheck="true">// 代码高亮显示</span><span class="token operator">==</span>我不是孙红雷丶<span class="token operator">==</span>    <span class="token comment" spellcheck="true">// 删除线</span><span class="token operator">~</span><span class="token operator">~</span>被删除的文字<span class="token operator">~</span><span class="token operator">~</span>    <span class="token comment" spellcheck="true">// 斜体</span><span class="token operator">*</span>斜体内容<span class="token operator">*</span>    </code></pre><p><strong>等不到天黑</strong></p><p>&#x3D;&#x3D;我不是孙红雷丶&#x3D;&#x3D;    </p><p><del>被删除的文字</del>    </p><p><em>斜体内容</em>   </p><h2 id="4、引用："><a href="#4、引用：" class="headerlink" title="4、引用："></a>4、引用：</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//引用语法</span><span class="token operator">></span>作者：叶仁平<span class="token operator">>></span>作者：叶仁平   <span class="token operator">>>></span>作者：叶仁平     </code></pre><p>&#x2F;&#x2F;引用语法</p><blockquote><p>作者：叶仁平</p><blockquote><p>作者：叶仁平   </p><blockquote><p>作者：叶仁平  </p></blockquote></blockquote></blockquote><h2 id="5、分割线："><a href="#5、分割线：" class="headerlink" title="5、分割线："></a>5、分割线：</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//分割线</span><span class="token operator">--</span><span class="token operator">-</span><span class="token comment" spellcheck="true">//分割线2</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>    </code></pre><hr><hr><h2 id="6、图片插入"><a href="#6、图片插入" class="headerlink" title="6、图片插入"></a>6、图片插入</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//在线图片/本地图片</span><span class="token operator">!</span><span class="token punctuation">[</span>我的照片<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token operator">/</span>image<span class="token operator">/</span>me<span class="token punctuation">.</span>png<span class="token punctuation">)</span> <span class="token operator">--</span>图片路径<span class="token comment" spellcheck="true">//引用</span><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"bg.png"</span> alt<span class="token operator">=</span><span class="token string">""</span> style<span class="token operator">=</span><span class="token string">"width:100%"</span> <span class="token operator">/</span><span class="token operator">></span> </code></pre><p><img src="/gh-pages/medias/reward/wechat.png" alt="我的照片"></p><p><img src="/gh-pages/images/me4.png"> 注：由于图片在本地，所以大家无法看到，掌握语法即可</p><p>&#x2F;&#x2F;首页文章展示缩略图<br>&#x2F;&#x2F; </p><h2 id="7、-超链接"><a href="#7、-超链接" class="headerlink" title="7、 超链接"></a>7、 超链接</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//超链接语法</span><span class="token punctuation">[</span>我的GitHub<span class="token punctuation">]</span><span class="token punctuation">(</span>https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>Song<span class="token operator">-</span>CQ<span class="token punctuation">)</span></code></pre><p>&#x2F;&#x2F;超链接语法<br><a href="https://github.com/Song-CQ">我的GitHub</a></p><h2 id="8、列表"><a href="#8、列表" class="headerlink" title="8、列表"></a>8、列表</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 无需列表</span><span class="token operator">-</span> 目录<span class="token number">1</span><span class="token operator">-</span> 目录<span class="token number">2</span><span class="token operator">-</span> 目录<span class="token number">3</span>    <span class="token comment" spellcheck="true">// 1+. + 名称    </span></code></pre><ul><li>无序列表1</li><li>反而威尔</li><li>额问问而非</li><li>沃尔夫二翁</li></ul><ol><li>首页</li><li>分类</li><li>标签</li></ol><h2 id="9、表格"><a href="#9、表格" class="headerlink" title="9、表格"></a>9、表格</h2><table><thead><tr><th>课程</th><th>语文</th><th>数学</th></tr></thead><tbody><tr><td></td><td>78</td><td>88</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Unity框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity 纹理压缩</title>
      <link href="/2024/07/29/unity-wen-li-ya-suo/"/>
      <url>/2024/07/29/unity-wen-li-ya-suo/</url>
      
        <content type="html"><![CDATA[<h2 id="为何要进行纹理压缩："><a href="#为何要进行纹理压缩：" class="headerlink" title="为何要进行纹理压缩："></a>为何要进行纹理压缩：</h2><p>纹理显示到屏幕上，需要CPU和GPU协作完成。CPU对资源进行计算解码，然后将纹理数据传输给GPU。GPU通过CPU的数据，将数据渲染到缓冲区。<br>纹理压缩减少了资源在CPU中进行解压缩的过程。<br>纹理压缩减小了包体大小，减少了数据量级，减轻了带宽计算的压力。<br>纹理压缩时内存的使用效率更高。<br>二、常见的纹理压缩格式：<br>DXT格式是Nvidia Tegra提供的，分为DXT1-DXT5这五个级别，Terga支持的实际上是DXT1、DXT3和DXT5。<br>ETC是安卓原生支持的，OPNEGL2.0都支持。ETC2只有OPENGL3.0支持.<br>PVRTC是Imagination PowerVR提供的，特别的TBDR架构，不渲染被遮挡的部分，有效节省计算资源和带宽。<br>ATC是Qualcomm Snapdragon提供的，它支持RGB纹理压缩但不包含alpha通道。<br>ASTC – 从IOS9(A8架构)Apple 手机开始支持ASTC压缩格式 。相对于PVRTC2&#x2F;4而言，ASTC(4X4)的压缩比会增加到0.25，不过显示效果也会好很多，而且不需要把图片设置为方形。<br>RGB 16 bit&#x2F;RGB 24 bit&#x2F;Alpha 8&#x2F;RGBA 16 bit&#x2F;RGBA 32 bit - 适用所有平台，非压缩格式，对内存消耗和渲染消耗非常不友好。<br>备注：一旦相应的贴图格式不兼容的时候，U3D会自动将其转换成RGB(A)格式。</p><p>不同格式的详细信息科参照官方文档：<a href="https://docs.unity3d.com/2017.4/Documentation/Manual/class-TextureImporterOverride.html">链接</a></p><h2 id="Android上的注意事项："><a href="#Android上的注意事项：" class="headerlink" title="Android上的注意事项："></a>Android上的注意事项：</h2><p>除非您针对特定的硬件（例如Tegra），否则ETC2压缩是Android上最有效的选项，可以在质量和文件大小（以及相关的内存大小要求）之间实现最佳平衡。如果需要Alpha通道，则可以在外部存储它，并且仍然可以从较小的Texture文件大小中受益。</p><p>您可以将ETC1用于具有alpha通道的纹理，但前提是该构建适用于Android并且纹理放置在地图集上（通过指定包装标签）。要启用此功能，请选中“ 使用ETC1压缩”复选框。Unity将生成的图集分成两个纹理，每个纹理都没有Alpha通道，然后将它们组合到渲染管道的最后部分。</p><p>要将alpha通道存储在Texture中，请使用RGBA16位压缩，所有硬件供应商均支持此压缩。</p>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客主题之matery的使用</title>
      <link href="/2022/08/22/hexo-jia-matery-de-shi-yong/"/>
      <url>/2022/08/22/hexo-jia-matery-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="文章-Front-matter-介绍"><a href="#文章-Front-matter-介绍" class="headerlink" title="文章 Front-matter 介绍"></a>文章 Front-matter 介绍</h2><h3 id="Front-matter-选项详解"><a href="#Front-matter-选项详解" class="headerlink" title="Front-matter 选项详解"></a>Front-matter 选项详解</h3><p>Front-matter 选项中的所有内容均为非必填的。但我仍然建议至少填写 title 和 date 的值。</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td>Markdown 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 _config.yml 中的 author</td><td>文章作者</td></tr><tr><td>img</td><td>featureImages 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <a href="http://xxx.com/xxx.jpg">http://xxx.com/xxx.jpg</a></td></tr><tr><td>top</td><td>true</td><td>推荐文章（文章是否置顶），如果 top 值为 true，则会作为首页推荐文章</td></tr><tr><td>cover</td><td>false</td><td>v1.0.2版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td>v1.0.2版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 password 的值，该值必须是用 SHA256 加密后的密码，防止被他人识破。前提是在主题的 config.yml 中激活了 verifyPassword 选项</td></tr><tr><td>toc</td><td>true</td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 config.yml 中激活了 toc 选项</td></tr><tr><td>mathjax</td><td>false</td><td>是否开启数学公式支持 ，本文章是否开启 mathjax，且需要在主题的 _config.yml 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr></tbody></table><h2 id="项目设置"><a href="#项目设置" class="headerlink" title="项目设置"></a>项目设置</h2><p>主要设置在  themes\matery_config.yml<br>页面的布局  themes\matery\source\css</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://blinkfox.github.io/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/">闪烁之狐</a>;<br>[特伦苏] (<a href="https://fenghen0918.github.io/2020/10/22/hexo/hexo-bo-ke-you-hua-pian-matery-yi/">https://fenghen0918.github.io/2020/10/22/hexo/hexo-bo-ke-you-hua-pian-matery-yi/</a>);<br>[FforF] (<a href="https://blog.csdn.net/One_OR_Five/article/details/138854581?spm=1001.2014.3001.5502">https://blog.csdn.net/One_OR_Five/article/details/138854581?spm=1001.2014.3001.5502</a>);</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> hexo-theme-matery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity 面试问题 优化</title>
      <link href="/2022/06/15/unity-mian-shi-wen-ti-you-hua/"/>
      <url>/2022/06/15/unity-mian-shi-wen-ti-you-hua/</url>
      
        <content type="html"><![CDATA[<h2 id="场景优化"><a href="#场景优化" class="headerlink" title="场景优化"></a>场景优化</h2><p>优化的方向有Drawcall，渲染面数(模型&#x2F;阴影)，灯光烘培，贴图压缩，内存</p><p>Drawcall 可以采用的手段有静态批处理,动态批处理,图集合批<br>1.静态批处理:<br>勾选BatchingStatic,打包后会将相同模型的物体进行合并网格,达到批处理的效果,但是会增加包体大小,优点可以进行烘培光照贴图<br>2.动态批处理:<br>每一帧把可以进行批处理的模型网格进行合并，再把合并后模型数据传递给GPU，然后使用同一个材质对其渲染,缺点动态批处理会消耗CPU,限制比较大.SRP渲染管线的动态批处理设置在渲染管线中的Advanced-&gt;Dynamic Batching选项<br>  限制:<br>  顶点属性要小于900<br>  缩放正负值要一样<br>  同一个实例<br>  复杂shader不支持，动态阴影也不支持，多pass渲染不支持<br>3.图集合批:</p><h2 id="内存优化"><a href="#内存优化" class="headerlink" title="内存优化"></a>内存优化</h2><p>1.资源内存占用<br>纹理（Texture）、网格（Mesh）、动画片段（AnimationClip）、音频片段（AudioClip）、材质（Material）、着色器（Shader）、字体资源（Font）以及文本资源（Text Asset）等等。</p><p>纹理压缩格式可以参考:<a href="https://song-cq.github.io/2022/06/24/%E7%BA%B9%E7%90%86%E5%8E%8B%E7%BC%A9/">纹理压缩格式</a>;</p><h2 id="资源加载优化"><a href="#资源加载优化" class="headerlink" title="资源加载优化"></a>资源加载优化</h2><p>资源加载的时候需要把资源从硬盘加载到内存，十分影响性能，优化方向有异步加载资源，分帧加载，使用对象池复用，缓存,减少资源的加载卸载频率，预加载等。<br>其中，纹理、网格、动画片段和音频片段则是最容易造成较大内存开销的资源</p><h2 id="GC优化"><a href="#GC优化" class="headerlink" title="GC优化"></a>GC优化</h2><p>GC，引用类型的数据存在堆内存中，在栈中只保存对应数据的堆内存地址，当触发GC时，会检查堆内存上的每个变量是否被引用，不被引用内存将回收以备下次内存分配。GC触发的时间有三种：<br>1.不同平台不同频率自动调用<br>2.堆内存不够的时候自动调用<br>3.调用System.GC.Collect()主动GC<br>优化方向：<br>1.减少内存分配，例如<br>  1）使用对象池复用对象;<br>  2）列表Clear而不是每次都new;<br>  3）一些接口(transform.name,tag等)每次调用都会开辟新的内存空间，可以缓存起来，减少调用频率，特别是在update里要避免new操作;<br>  4）另外每一个字符串都是不可修改的，如果对字符串执行拼接操作，中间会有多个字符开辟新的内存空间，所以应该使用string.format或者分割文本显示或者sringbuilder去做拼接显示；<br>  5）避免拆箱装箱操作，装箱操作是把值类型变成引用类型，会开辟新的内存空间<br>  6）引用类型的比较也会有GC，可以使用对应的id去比较<br>2.减少GC次数，可以在静态loading界面主动触发GC，减少无用内存的引用。<br>3.连续分配内存，如果分配空间过于零散，会使大空间内存更难分配 </p>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
